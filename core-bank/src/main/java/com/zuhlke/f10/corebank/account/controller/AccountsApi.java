/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.zuhlke.f10.corebank.account.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.zuhlke.f10.corebank.model.*;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-07-18T18:04:57.519+08:00")

@Api(value = "accounts", description = "the accounts API")
public interface AccountsApi {


    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Delete account", nickname = "deleteAccount", notes = "", authorizations = {
        @Authorization(value = "API-KEY"),
        @Authorization(value = "Authorization")
    }, tags={ "Accounts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful Response"),
            @ApiResponse(code = 400, message = "Bad Request", response = GenericError.class),
            @ApiResponse(code = 401, message = "Authentication Error", response = GenericError.class),
            @ApiResponse(code = 403, message = "Authorization Failed", response = GenericError.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = ServerError.class) })
    @RequestMapping(value = "/accounts/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
   ResponseEntity<Void> deleteAccount(@ApiParam(value = "", required = true) @PathVariable("id") String id);


    @ApiOperation(value = "Get account", nickname = "getAccount", notes = "", response = AccountBalance.class, authorizations = {
        @Authorization(value = "API-KEY"),
        @Authorization(value = "Authorization")
    }, tags={ "Accounts", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful Response", response = AccountBalance.class),
            @ApiResponse(code = 400, message = "Bad Request", response = GenericError.class),
            @ApiResponse(code = 401, message = "Authentication Error", response = GenericError.class),
            @ApiResponse(code = 403, message = "Authorization Failed", response = GenericError.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = ServerError.class) })
    @RequestMapping(value = "/accounts/{id}",
        produces = { "application/json" },
        method = RequestMethod.GET)
   ResponseEntity<AccountBalance> getAccount(@ApiParam(value = "", required = true) @PathVariable("id") String id);



    @ApiOperation(value = "List accounts", nickname = "listAccounts", notes = "", response = Account.class, responseContainer = "List", authorizations = {
        @Authorization(value = "API-KEY"),
        @Authorization(value = "Authorization")
    }, tags={ "Accounts", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful Response", response = Account.class, responseContainer = "List"),
            @ApiResponse(code = 400, message = "Bad Request", response = GenericError.class),
            @ApiResponse(code = 401, message = "Authentication Error", response = GenericError.class),
            @ApiResponse(code = 403, message = "Authorization Failed", response = GenericError.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = ServerError.class) })
    @RequestMapping(value = "/accounts",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Account>> listAccounts();


    @ApiOperation(value = "Create account", nickname = "createAccount", notes = "", response = Account.class, authorizations = {
        @Authorization(value = "API-KEY"),
        @Authorization(value = "Authorization")
    }, tags={ "Accounts", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Created", response = Account.class),
            @ApiResponse(code = 400, message = "Bad Request", response = GenericError.class),
            @ApiResponse(code = 401, message = "Authentication Error", response = GenericError.class),
            @ApiResponse(code = 403, message = "Authorization Failed", response = GenericError.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = ServerError.class) })
    @RequestMapping(value = "/accounts",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Account> createAccount(@ApiParam(value = "") @Valid @RequestBody Account body);


    @ApiOperation(value = "Transfer Fund", nickname = "makeFundTransfer", notes = "", response = TransferResponse.class, authorizations = {
        @Authorization(value = "API-KEY"),
        @Authorization(value = "Authorization")
    }, tags={ "Transfers", })
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Created", response = TransferResponse.class),
            @ApiResponse(code = 400, message = "Bad Request", response = GenericError.class),
            @ApiResponse(code = 401, message = "Authentication Error", response = GenericError.class),
            @ApiResponse(code = 403, message = "Authorization Failed", response = GenericError.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = ServerError.class) })
    @RequestMapping(value = "/accounts/{id}/transfer",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<TransferResponse> makeFundTransfer(@ApiParam(value = "", required = true) @PathVariable("id") String id, @ApiParam(value = "") @Valid @RequestBody FundTransferDetail body);


    @ApiOperation(value = "Update account", nickname = "updateAccount", notes = "", response = Account.class, authorizations = {
        @Authorization(value = "API-KEY"),
        @Authorization(value = "Authorization")
    }, tags={ "Accounts", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful Response", response = Account.class),
        @ApiResponse(code = 400, message = "", response = GenericError.class),
        @ApiResponse(code = 401, message = "", response = GenericError.class),
        @ApiResponse(code = 403, message = "", response = GenericError.class),
        @ApiResponse(code = 404, message = "", response = GenericError.class),
        @ApiResponse(code = 500, message = "", response = ServerError.class) })
    @RequestMapping(value = "/accounts/{id}",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Account> updateAccount(@ApiParam(value = "", required = true) @PathVariable("id") String id, @ApiParam(value = "") @Valid @RequestBody Account body) ;


    @ApiOperation(value = "Get Transactions", nickname = "getAccountTransactions", notes = "", authorizations = {
            @Authorization(value = "API-KEY"),
            @Authorization(value = "Authorization")
    }, tags={ "Transactions", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successful Response", response = AccountTransactions.class),
            @ApiResponse(code = 400, message = "Bad Request", response = GenericError.class),
            @ApiResponse(code = 401, message = "Authentication Error", response = GenericError.class),
            @ApiResponse(code = 403, message = "Authorization Failed", response = GenericError.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = ServerError.class) })
    @RequestMapping(value = "/accounts/{id}/transactions",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<AccountTransactions> getAccountTransactions(@ApiParam(value = "", required = true) @PathVariable("id") String id);


    @ApiOperation(value = "Get Balance", nickname = "getAccountBalance", notes = "", authorizations = {
            @Authorization(value = "API-KEY"),
            @Authorization(value = "Authorization")
    }, tags={ "Balance", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successful Response", response = AccountTransactions.class),
            @ApiResponse(code = 400, message = "Bad Request", response = GenericError.class),
            @ApiResponse(code = 401, message = "Authentication Error", response = GenericError.class),
            @ApiResponse(code = 403, message = "Authorization Failed", response = GenericError.class),
            @ApiResponse(code = 500, message = "Internal Server Error", response = ServerError.class) })
    @RequestMapping(value = "/accounts/{id}/balance",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<AccountBalance> getAccountBalance(@ApiParam(value = "", required = true) @PathVariable("id") String id);



    @ApiOperation(value = "Create Transaction", nickname = "createTransaction", notes = "", response = TransferResponse.class, authorizations = {
            @Authorization(value = "API-KEY"),
            @Authorization(value = "Authorization")
    }, tags={ "Transactions", })
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "", response = TransferResponse.class),
            @ApiResponse(code = 400, message = "", response = GenericError.class),
            @ApiResponse(code = 401, message = "", response = GenericError.class),
            @ApiResponse(code = 403, message = "", response = GenericError.class),
            @ApiResponse(code = 404, message = "", response = GenericError.class),
            @ApiResponse(code = 500, message = "", response = GenericError.class) })
    @RequestMapping(value = "/accounts/{id}/transactions",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<TransferResponse> createTransaction(@ApiParam(value = "",required=true) @PathVariable("id") String accountId,@ApiParam(value = ""  )  @Valid @RequestBody Transaction body);

    }
